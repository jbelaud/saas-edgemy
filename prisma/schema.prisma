generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscriber {
  id        String       @id @default(cuid())
  email     String       @unique
  role      WaitlistRole
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  firstName String?

  @@map("subscribers")
}

model account {
  id                    String    @id
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model coach {
  id              String         @id @default(cuid())
  userId          String         @unique
  user            user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  slug            String         @unique
  firstName       String
  lastName        String
  bio             String?
  methodology     String?        // Méthodologie de coaching (texte libre)
  bannerUrl       String?
  avatarUrl       String?
  status          CoachStatus    @default(INACTIVE)
  stripeAccountId String?
  subscriptionId  String?
  badges          String[]
  timezone        String?        // ex: "Europe/Paris", "America/Montreal"
  // Compétences et expérience
  formats         String[]       // MTT, Cash Game, SNG, Spin & Go
  stakes          String?        // Limites jouées
  roi             Float?
  experience      Int?           // Années d'expérience
  languages       String[]       // fr, en, de, it, es
  // Liens sociaux
  twitchUrl       String?
  youtubeUrl      String?
  twitterUrl      String?
  discordUrl      String?
  // Relations
  announcements   Announcement[]
  availabilities  Availability[]
  reservations    Reservation[]
  coachingPackages CoachingPackage[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model CoachDraft {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Étape 1
  firstName       String?
  lastName        String?
  bio             String?
  formats         String[]
  stakes          String?
  roi             Float?
  experience      Int?
  languages       String[]
  // Étape 2
  twitchUrl       String?
  youtubeUrl      String?
  twitterUrl      String?
  discordUrl      String?
  // Étape 3
  avatarUrl       String?
  bannerUrl       String?
  // Étape 4
  stripeAccountId String?
  // Étape 5
  subscriptionId  String?
  currentStep     Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Announcement {
  id           String        @id @default(cuid())
  coachId      String
  coach        coach         @relation(fields: [coachId], references: [id], onDelete: Cascade)
  type         String        @default("STRATEGY") // STRATEGY, REVIEW, TOOL
  title        String
  slug         String        @unique
  description  String
  priceCents   Int
  durationMin  Int
  
  // Champs spécifiques selon le type (JSON)
  variant      String?       // Pour STRATEGY: MTT, Cash Game, etc.
  format       String?       // NLHE, PLO, PLO5, etc.
  abiRange     String?       // Pour STRATEGY: "20-25€"
  tags         String[]      // Tags facultatifs
  
  // Pour REVIEW
  reviewType   String?       // "Session MTT", "Session Cash Game", etc.
  reviewSupport String?      // "Replay vidéo", "Partage d'écran", etc.
  
  // Pour TOOL
  toolName     String?       // GTO Wizard, Hold'em Manager, etc.
  toolObjective String?      // "Prise en main", "Optimisation avancée", etc.
  prerequisites String?      // Prérequis optionnels
  
  // Pour MENTAL
  mentalFocus  String?       // "Gestion du tilt", "Confiance", etc.
  
  isActive     Boolean       @default(true)
  reservations Reservation[]
  packs        AnnouncementPack[]
  coachingPackages CoachingPackage[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model AnnouncementPack {
  id             String   @id @default(cuid())
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  
  hours          Int      // Nombre d'heures (5, 10, etc.)
  totalPrice     Int      // Prix total en centimes
  discountPercent Int?    // Pourcentage de réduction optionnel
  
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  reservations   Reservation[]
  
  @@index([announcementId])
}

model Availability {
  id        String   @id @default(cuid())
  coachId   String
  coach     coach    @relation(fields: [coachId], references: [id], onDelete: Cascade)
  
  start     DateTime // Date et heure de début du créneau
  end       DateTime // Date et heure de fin du créneau
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([coachId])
  @@index([start])
}

model Reservation {
  id              String       @id @default(cuid())
  announcementId  String
  announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  coachId         String
  coach           coach        @relation(fields: [coachId], references: [id], onDelete: Cascade)
  playerId        String
  player          user         @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  // Pack d'heures
  packId          String?
  pack            AnnouncementPack? @relation(fields: [packId], references: [id], onDelete: SetNull)
  sessionNumber   Int?         // Numéro de session dans le pack (1, 2, 3...)
  
  startDate       DateTime
  endDate         DateTime
  status          ReservationStatus @default(PENDING)
  priceCents      Int
  stripePaymentId String?
  packageSession  PackageSession?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@index([packId])
}

model CoachingPackage {
  id             String       @id @default(cuid())
  playerId       String
  player         user         @relation(fields: [playerId], references: [id], onDelete: Cascade)
  coachId        String
  coach          coach        @relation(fields: [coachId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  totalHours     Int
  remainingHours Int
  priceCents     Int
  stripePaymentId String?
  status         PackageStatus @default(ACTIVE)
  sessions       PackageSession[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([playerId])
  @@index([coachId])
}

model PackageSession {
  id               String       @id @default(cuid())
  packageId        String
  package          CoachingPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  reservationId    String?      @unique
  reservation      Reservation? @relation(fields: [reservationId], references: [id])
  startDate        DateTime
  endDate          DateTime
  durationMinutes  Int
  status           PackageSessionStatus @default(SCHEDULED)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([packageId])
}

model player {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  abi       Float?
  formats   String[]
  goals     String?
  winnings  Float?
  timezone  String?  // ex: "Europe/Paris", "America/Montreal"
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String        @id
  email         String?       @unique
  emailVerified Boolean       @default(false)
  name          String?
  image         String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  account       account[]
  coach         coach?
  coachDraft    CoachDraft?
  player        player?
  session       session[]
  reservations  Reservation[]
  coachingPackages CoachingPackage[]
}

model verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@unique([identifier, value])
}

enum Role {
  USER
  PLAYER
  COACH
  ADMIN
}

enum WaitlistRole {
  PLAYER
  COACH
  ADMIN
}

enum CoachStatus {
  INACTIVE
  PENDING_REVIEW
  ACTIVE
  SUSPENDED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PackageStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PackageSessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}
