generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscriber {
  id        String       @id @default(cuid())
  email     String       @unique
  role      WaitlistRole
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  firstName String?

  @@map("subscribers")
}

model account {
  id                    String    @id
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model coach {
  id               String            @id @default(cuid())
  userId           String            @unique
  slug             String            @unique
  firstName        String
  lastName         String
  bio              String?
  bannerUrl        String?
  avatarUrl        String?
  status           CoachStatus       @default(INACTIVE)
  stripeAccountId  String?
  subscriptionId   String?
  badges           String[]
  formats          String[]
  stakes           String?
  roi              Float?
  experience       Int?
  languages        String[]
  twitchUrl        String?
  youtubeUrl       String?
  twitterUrl       String?
  discordUrl       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  timezone         String?
  methodology      String?
  announcements    Announcement[]
  availabilities   Availability[]
  coachingPackages CoachingPackage[]
  reservations     Reservation[]
  user             user              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoachDraft {
  id              String   @id @default(cuid())
  userId          String   @unique
  firstName       String?
  lastName        String?
  bio             String?
  formats         String[]
  stakes          String?
  roi             Float?
  experience      Int?
  languages       String[]
  twitchUrl       String?
  youtubeUrl      String?
  twitterUrl      String?
  discordUrl      String?
  avatarUrl       String?
  bannerUrl       String?
  stripeAccountId String?
  subscriptionId  String?
  currentStep     Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Announcement {
  id               String             @id @default(cuid())
  coachId          String
  type             String             @default("STRATEGY")
  title            String
  slug             String             @unique
  description      String
  priceCents       Int
  durationMin      Int
  variant          String?
  format           String?
  abiRange         String?
  tags             String[]
  reviewType       String?
  reviewSupport    String?
  toolName         String?
  toolObjective    String?
  prerequisites    String?
  mentalFocus      String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  coach            coach              @relation(fields: [coachId], references: [id], onDelete: Cascade)
  packs            AnnouncementPack[]
  coachingPackages CoachingPackage[]
  reservations     Reservation[]
}

model AnnouncementPack {
  id              String        @id @default(cuid())
  announcementId  String
  hours           Int
  totalPrice      Int
  discountPercent Int?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  announcement    Announcement  @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  reservations    Reservation[]

  @@index([announcementId])
}

model Availability {
  id        String   @id @default(cuid())
  coachId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  start     DateTime
  end       DateTime
  coach     coach    @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@index([coachId])
  @@index([start])
}

model Reservation {
  id              String            @id @default(cuid())
  announcementId  String
  coachId         String
  playerId        String
  packId          String?
  sessionNumber   Int?
  startDate       DateTime
  endDate         DateTime
  status          ReservationStatus @default(PENDING)
  priceCents      Int
  stripePaymentId String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  packageSession  PackageSession?
  announcement    Announcement      @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  coach           coach             @relation(fields: [coachId], references: [id], onDelete: Cascade)
  pack            AnnouncementPack? @relation(fields: [packId], references: [id])
  player          user              @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([packId])
}

model CoachingPackage {
  id              String           @id @default(cuid())
  playerId        String
  coachId         String
  announcementId  String
  totalHours      Int
  remainingHours  Int
  priceCents      Int
  stripePaymentId String?
  status          PackageStatus    @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  announcement    Announcement     @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  coach           coach            @relation(fields: [coachId], references: [id], onDelete: Cascade)
  player          user             @relation(fields: [playerId], references: [id], onDelete: Cascade)
  sessions        PackageSession[]

  @@index([playerId])
  @@index([coachId])
}

model PackageSession {
  id              String               @id @default(cuid())
  packageId       String
  reservationId   String?              @unique
  startDate       DateTime
  endDate         DateTime
  durationMinutes Int
  status          PackageSessionStatus @default(SCHEDULED)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  package         CoachingPackage      @relation(fields: [packageId], references: [id], onDelete: Cascade)
  reservation     Reservation?         @relation(fields: [reservationId], references: [id])

  @@index([packageId])
}

model player {
  id        String   @id @default(cuid())
  userId    String   @unique
  abi       Float?
  formats   String[]
  goals     String?
  winnings  Float?
  createdAt DateTime @default(now())
  firstName String?
  lastName  String?
  timezone  String?
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id               String            @id
  email            String?           @unique
  emailVerified    Boolean           @default(false)
  name             String?
  image            String?
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  coachDraft       CoachDraft?
  coachingPackages CoachingPackage[]
  reservations     Reservation[]
  account          account[]
  coach            coach?
  player           player?
  session          session[]
}

model verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@unique([identifier, value])
}

enum Role {
  USER
  PLAYER
  COACH
  ADMIN
}

enum WaitlistRole {
  PLAYER
  COACH
  ADMIN
}

enum CoachStatus {
  INACTIVE
  PENDING_REVIEW
  ACTIVE
  SUSPENDED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PackageStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PackageSessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}
