generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// WAITLIST (Landing page)
// ==========================================

model Subscriber {
  id        String       @id @default(cuid())
  email     String       @unique
  role      WaitlistRole
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  firstName String?

  @@map("subscribers")
}

enum WaitlistRole {
  PLAYER
  COACH
}

// ==========================================
// AUTHENTIFICATION (Better Auth + Edgemy)
// ==========================================

model User {
  id             String     @id @default(cuid())
  email          String?    @unique
  emailVerified  Boolean    @default(false)
  name           String?
  image          String?
  role           Role       @default(USER)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  accounts       Account[]
  sessions       Session[]
  coachProfile   Coach?
  playerProfile  Player?

  @@map("user")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  accountId          String
  providerId         String
  accessToken        String?
  refreshToken       String?
  idToken            String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope              String?
  password           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  expiresAt    DateTime
  token        String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  userId       String

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Player {
  id           String   @id @default(cuid())
  userId       String   @unique
  abi          Float?
  formats      String[]
  goals        String?
  winnings     Float?
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("player")
}

model Coach {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?
  hourlyRate   Float?
  specialties  String[]
  experience   Int?
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("coach")
}

enum Role {
  USER
  PLAYER
  COACH
  ADMIN
}
