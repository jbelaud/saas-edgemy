---
description: 
globs: 
alwaysApply: false
---
# Variables d'Environnement avec @t3-oss/env-nextjs

## Principe Général

Le projet utilise `@t3-oss/env-nextjs` pour la gestion des variables d'environnement avec validation TypeScript stricte. Toutes les variables d'environnement doivent être déclarées dans [env.ts](mdc:env.ts).

## Structure du Fichier env.ts

### Variables Serveur (Non Exposées au Client)
```typescript
server: {
  // Base de données
  DATABASE_URL: z.string().url(),
  
  // Authentification
  AUTH_SECRET: z.string().min(1),
  BETTER_AUTH_SECRET: z.string().min(1),
  
  // Email
  RESEND_API_KEY: z.string().min(1),
  EMAIL_FROM: z.string().email(),
  
  // Stripe (serveur)
  STRIPE_SECRET_KEY: z.string().min(1),
  
  // Environnement
  NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),
}
```

### Variables Client (Exposées au Client)
```typescript
client: {
  // Doivent commencer par NEXT_PUBLIC_
  NEXT_PUBLIC_APP_URL: z.string().url(),
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: z.string().min(1),
  
  // Variables booléennes avec transformation
  NEXT_PUBLIC_BETTER_AUTH_REQUIRE_EMAIL_VERIFICATION: z
    .string()
    .transform((val) => val === 'true')
    .default('true'),
}
```

## Règles de Validation

### Types de Base
- **URLs** : `z.string().url()`
- **Emails** : `z.string().email()`
- **Chaînes obligatoires** : `z.string().min(1)`
- **Chaînes optionnelles** : `z.string().optional()`

### Transformations
- **Booléens** : `z.string().transform((val) => val === 'true')`
- **Nombres** : `z.string().transform((val) => Number(val))`
- **Énumérations** : `z.enum(['value1', 'value2'])`

### Valeurs par Défaut
```typescript
LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),
NEXT_PUBLIC_FEATURE_FLAG: z.string().transform((val) => val === 'true').default('false'),
```

## Utilisation dans le Code

### Import
```typescript
import { env } from '@/env'
```

### Variables Serveur (Côté Serveur Uniquement)
```typescript
// ✅ Correct - Dans un Server Component, API Route, ou Server Action
const dbUrl = env.DATABASE_URL
const stripeSecret = env.STRIPE_SECRET_KEY
```

### Variables Client (Accessible Partout)
```typescript
// ✅ Correct - Dans n'importe quel composant
const appUrl = env.NEXT_PUBLIC_APP_URL
const stripePublic = env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
```

## Exemples Pratiques

### Configuration Better Auth
Voir [auth.ts](mdc:src/lib/better-auth/auth.ts) et [auth-client.ts](mdc:src/lib/better-auth/auth-client.ts) pour des exemples d'utilisation avec Better Auth.

### Configuration Stripe
```typescript
// Variables serveur pour les webhooks
const stripe = new Stripe(env.STRIPE_SECRET_KEY)

// Variables client pour les composants
const stripePromise = loadStripe(env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY)
```

### Configuration Base de Données
```typescript
// Configuration Drizzle
export const db = drizzle(env.DATABASE_URL)
```

## Bonnes Pratiques

### ✅ À Faire
- Déclarer toutes les variables dans [env.ts](mdc:env.ts)
- Utiliser des validations Zod appropriées
- Préfixer les variables client avec `NEXT_PUBLIC_`
- Utiliser des transformations pour les types non-string
- Définir des valeurs par défaut quand approprié

### ❌ À Éviter
- Utiliser `process.env` directement dans le code
- Oublier de déclarer les variables dans `runtimeEnv`
- Exposer des secrets côté client
- Utiliser des variables non validées

## Configuration pour les Tests

### Fichier d'Environnement de Test
Pour les tests, utiliser un fichier `.env.test` séparé contenant les variables d'environnement spécifiques aux tests :

```bash
# .env.test
DATABASE_URL="postgresql://test:test@localhost:5432/test_db"
AUTH_SECRET="test-secret-key"
BETTER_AUTH_SECRET="test-better-auth-secret"
# ... autres variables de test
```

### Configuration Vitest
Le fichier `vitest.config.ts` charge automatiquement le fichier `.env.test` :

```typescript
import dotenv from 'dotenv'
import path from 'path'

dotenv.config({path: path.resolve(__dirname, '.env.test')})
```

### Bonnes Pratiques pour les Tests
- ✅ Utiliser des bases de données de test dédiées
- ✅ Utiliser des clés d'API de test ou des mocks
- ✅ Définir des valeurs par défaut appropriées pour les tests
- ❌ Ne jamais utiliser les variables de production dans les tests

## Configuration Avancée

### Skip Validation (Docker)
```typescript
skipValidation: !!process.env.SKIP_ENV_VALIDATION,
```

### Empty String Handling
```typescript
emptyStringAsUndefined: true,
```

## Exemple Complet

Voir [env.ts](mdc:env.ts) pour la configuration complète du projet avec toutes les variables d'environnement validées et typées.

## Debugging

En cas d'erreur de validation, le message d'erreur indiquera :
- Quelle variable pose problème
- Quel type était attendu
- Quelle valeur a été reçue

Exemple d'erreur :
```
❌ Invalid environment variables:
{
  "DATABASE_URL": [
    "Invalid url"
  ]
}
```
